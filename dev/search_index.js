var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MeanFieldGraph","category":"page"},{"location":"#MeanFieldGraph","page":"Home","title":"MeanFieldGraph","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MeanFieldGraph package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MeanFieldGraph]","category":"page"},{"location":"#MeanFieldGraph.DiscreteTimeData","page":"Home","title":"MeanFieldGraph.DiscreteTimeData","text":"DiscreteTimeData(X)\n\nA binary discrete time data of length T with N dimensions.\n\nArguments\n\nX::Matrix{Bool}: X[i, t] gives the presence or absence of an event at time t for component i.\n\nlength(data)                # Get the time length of data\nsize(data)                  # Get the dimensions of data, i.e. `(N,T)`\ndata[:,range::UnitRange]    # Extract the data in the time interval `range`.\n\n\n\n\n\n","category":"type"},{"location":"#MeanFieldGraph.MarkovChainConnectivity","page":"Home","title":"MeanFieldGraph.MarkovChainConnectivity","text":"MarkovChainConnectivity(model,θ)\n\nA Markov Chain model with parameters given by model and connectivity matrix given by θ.\n\nArguments\n\nmodel::MarkovChainModel: contains the parameters μ, λ and p.\nθ::Matrix{Bool}: θ[i, j] gives the presence or absence of the influence of component j onto component i.\n\nsize(connec)        # Get the number of components.\n\nRemark\n\nSince the connectiviy matrix is specified, the parameter model.p is not used.\n\n\n\n\n\n","category":"type"},{"location":"#MeanFieldGraph.MarkovChainModel","page":"Home","title":"MeanFieldGraph.MarkovChainModel","text":"MarkovChainModel(μ,λ,p)\n\nA Markov Chain model with parameters μ, λ and p.\n\nArguments\n\nμ: Spontaneous event probability parameter\nλ: Interaction parameter\np: Edge probability\n\nExternal links\n\nChevallier, Löcherbach, Ost\n\n\n\n\n\n","category":"type"},{"location":"#Base.rand-Tuple{MarkovChainConnectivity, Vector{Bool}, Int64}","page":"Home","title":"Base.rand","text":"rand(modelconnec::MarkovChainConnectivity, excitatory::Vector{Bool}, T::Int)\n\nSimulate a realization of a Markov Chain model with a specified connectivity matrix.\n\nArguments\n\nmodelconnec::MarkovChainConnectivity: a MarkovChainModel with a specified connectivity matrix θ.\nexcitatory::Vector{Bool}: true coordinates correspond to excitatory components and false coordinates correspond to inhibitory components.\nT::Int: Time length of the simulation.\n\nusing MeanFieldGraph\nmodel = MarkovChainModel(.5, .5, .5)\nθ = [[1 1];[0 1]]\nmodelconnec = MarkovChainConnectivity(model,θ)\nexcitatory = [true, false]\n\nusing Random\nRandom.seed!(1)\ndata = rand(modelconnec, excitatory, 10)\ndata.X\n\n# output\n\n2×10 Matrix{Bool}:\n 1  0  0  0  1  1  1  1  1  1\n 1  0  1  1  0  1  0  1  1  0\n\n\n\n\n\n","category":"method"},{"location":"#Base.rand-Tuple{MarkovChainModel, Vector{Bool}, Int64}","page":"Home","title":"Base.rand","text":"rand(model::MarkovChainModel, excitatory::Vector{Bool}, T::Int)\n\nSimulate a realization of a Markov Chain model without a specified connectivity matrix.\n\nArguments\n\nmodel::MarkovChainModel: contains the parameters μ, λ and p.\nexcitatory::Vector{Bool}: true coordinates correspond to excitatory components and false coordinates correspond to inhibitory components.\nT::Int: Time length of the simulation.\n\nRemark\n\nIt generates a connectivity matrix according to an Erdos-Rényi graph with parameter p and then apply the method rand(modelconnec::MarkovChainConnectivity, excitatory::Vector{Bool}, T::Int). ```\n\n\n\n\n\n","category":"method"},{"location":"#MeanFieldGraph.classification-Tuple{DiscreteTimeData}","page":"Home","title":"MeanFieldGraph.classification","text":"classification(data::DiscreteTimeData)\n\nEstimates the two underlying communities (one excitatory and one inhibitory) from the data set data. It returns a Vector{Bool} where the true coordinates correspond to excitatory components and false coordinates correspond to inhibitory components.\n\n\n\n\n\n","category":"method"},{"location":"#MeanFieldGraph.estimators","page":"Home","title":"MeanFieldGraph.estimators","text":"estimators(data::DiscreteTimeData, Δ::Int=floor(Int,log(length(data))))\n\nCompute the estimators hatm, hatv and hatw on a data set data with tuning parameter Δ.\n\nRemark\n\nIf the value Δ = 0 is chosen, then it is replaced by its default value floor(Int,log(length(data)))\n\n\n\n\n\n","category":"function"},{"location":"#MeanFieldGraph.mvw-NTuple{4, Any}","page":"Home","title":"MeanFieldGraph.mvw","text":"mvw(μ, λ, p, r₊)\n\nCompute the targets m, v and w corresponding to the parameters μ, λ, p and the ratio of excitatory components r₊. \n\nThe mathematical expressions are:\n\nbeginaligned\nm = fracmu+(1-lambda)pr_-1-p(1-lambda)(r_+-r_-)\nv = (1-lambda)^2 p(1-p)((m-r_-)^2+r_+r_-)  \nw = m(1-m)frac1+4(1-lambda)^2p^2r_+r_-(1-p(1-lambda)(r_+-r_-))^2\nendaligned\n\nArguments\n\nμ: Spontaneous event probability \nλ: Interaction parameter\np: Edge probability\nr₊: ratio of excitatory components\n\n\n\n\n\n","category":"method"},{"location":"#MeanFieldGraph.mvw_inf-Tuple{MarkovChainConnectivity, Vector{Bool}}","page":"Home","title":"MeanFieldGraph.mvw_inf","text":"mvw_inf(modelconnec::MarkovChainConnectivity, excitatory::Vector{Bool})\n\nCompute the limit of the three estimators hatm, hatv and hatw when Tto infty.\n\nThe mathematical expressions are:\n\nbeginaligned\nm_infty = overlinem^N \nv_infty = sum_i=1^N (m^N_i - overlinem^N)^2  \nw_infty = frac1N sum_i=1^N (c^N_i)^2 m^N_i (1 - m^N_i)  \nendaligned\n\nArguments\n\nmodelconnec::MarkovChainConnectivity: a MarkovChainModel with a specified connectivity matrix θ.\nexcitatory::Vector{Bool}: true coordinates correspond to excitatory components and false coordinates correspond to inhibitory components.\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.plot-Tuple{DiscreteTimeData}","page":"Home","title":"RecipesBase.plot","text":"plot(data::DiscreteTimeData)\n\nPlot a black and white image corresponding to data. Black pixels correpond to the value 1. The x-axis correspond to time and y-axis correpond to components.\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit-Tuple{Type{MarkovChainModel}, DiscreteTimeData, Float64}","page":"Home","title":"StatsAPI.fit","text":"fit(::Type{MarkovChainModel}, data::DiscreteTimeData, r₊; Δ::Int=floor(Int,log(length(data))))\n\nFit a MarkovChainModel to a data set data with asymptotic excitatory proportion r₊.\n\nKeyword argument\n\nΔ: tuning parameter of the method. Its default value is the floor of log(T) where T is the time length of data.\n\n\n\n\n\n","category":"method"}]
}
